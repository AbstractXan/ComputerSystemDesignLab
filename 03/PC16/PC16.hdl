/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc0 == 0 && inc1 == 0)   out[t+1] = out[t] + 0  (integer addition)
 * else if (inc0 == 0 && inc1 == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else if (inc0 == 1 && inc1 == 0)   out[t+1] = out[t] + 2  (integer addition)
 * else   out[t+1] = out[t] + 4  (integer addition)
 */

CHIP PC16 {
    IN in[16],load,inc0,inc1,reset;
    OUT out[16];

    PARTS:
    	// Increment 
  	// incd1 = 1
    	Inc16(in[0..15]=false,out=incd1);
    	// incd2 = 2
    	Inc16(in=incd,out=incd2);
    	// incd4 = 4
    	Add16(a=incd2,b=inc2,out=incd4);
  
  	// Choose increment
	Mux4Way16(a[0..15]=false,b=incd1,c=incd2,d=incd4,sel[0]=inc0,sel[1]=inc1,out=inc);
	
	// Add inc to prev
	Add16(a=inc,b=prevout,out=incd);  

	// Mux via sel=inc
	Mux16(a=prevout,b=incd,sel=inc,out=first);

	// Mux via load flag
	Mux16(a=first,b=in,sel=load,out=second);

	// Mux via reset flag
	Mux16(a=second,b[0..15]=false,sel=reset,out=this);
	
	// Store output, Send output
	Register(in=this,load=true,out=out,out=prevout);
}
